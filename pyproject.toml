[project]
name = "auth_test_task"
version = "0.1.0"
description = "Тестовое задание с реализацией API с авторизацией и разграничением прав"

authors = [{ name = "UnBut", email = "unbuting@gmail.com" }]

license = { text = "Proprietary" }
readme = "README.md"
requires-python = ">=3.12,<4.0"

dependencies = [
    "fastapi[standard] (>=0.115.13,<0.116.0)",
    "sqlalchemy (>=2.0.41,<3.0.0)",
    "redis (>=6.2.0,<7.0.0)",
    "alembic (>=1.16.2,<2.0.0)",
    "pydantic-settings (>=2.10.0,<3.0.0)",
    "pydantic[email] (>=2.11.7,<3.0.0)",
    "asyncpg (>=0.30.0,<0.31.0)",
    "python-multipart (>=0.0.20,<0.0.21)",
    "pyjwt (>=2.10.1,<3.0.0)",
    "bcrypt (>=4.3.0,<5.0.0)",
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
ruff = "^0.13.0"

[tool.setuptools]
[tool.setuptools.packages.find]
include = ["auth_test_task*"]

# LSP and Linter configuration
[tool.basedpyright]
include = ["src", "migrations"]
pythonVersion = "3.12"
pythonPlatform = "Linux"
typeCheckingMode = "recommended"

reportPrivateLocalImportUsage = "none" # Отключает ошибку при импорте из модуля с __init__.py
reportUnusedCallResult = "none" # Отключает ошибку при несохранении результата вызова функции
reportImplicitStringConcatenation = "none" # Отключает ошибку при неявной конкатенации строк
# reportMissingTypeStubs = "warning"

[tool.ruff]
src = ["src/auth_test_task"]
line-length = 100
indent-width = 4
lint.select = ["ALL"]
lint.ignore = [
    "ARG003",
    "D203",
    "D211",
    "D213",
    "FAST002",
    "FAST003",
    "B008",
    "D102",
    "D103",
    "D107",
    "B904",
    "COM812",
    "ANN401",
    "TRY400",
    "RUF001",
    "RUF002",
    "RUF003",
]

# Миграции базы данных с помощью Alembic
[tool.alembic]
# Путь к папке со скриптами миграций, текущая директория обозначается через %(here)s
script_location = "%(here)s/migrations"

# Шаблон, используемый для генерации имен файлов миграций, по умолчанию - %%(rev)s_%%(slug)s
# Документация: https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
file_template = "%%(slug)s_%%(rev)s"

# Путь, добавляемый к sys.path, по умолчанию текущая директория
prepend_sys_path = ["."]

# Используемый часовой пояс для названия и комментариев в файлах миграций
# Для работы требуются python>=3.9 и alembic[tz], значение передается в ZoneInfo()
# Оставьте пустым для местного времени
timezone = "Europe/Moscow"

# Максимальная длина сообщения к миграции, после которого оно обрезается
truncate_slug_length = "40"

# Указывает что работа файла env.py обязательна
revision_environment = false

# Установите true для использования .pyc или .pyo файлов
sourceless = false

# Список директорий для хранения версий
version_locations = ["%(here)s/migrations/versions"]


# Рекурсивный поиск в файлах миграций
recursive_version_locations = false

# Кодировка используемая файлами миграций
output_encoding = "utf-8"


# Проверка и форматирование через ruff
[[tool.alembic.post_write_hooks]]
name = "Ruff Formatter"
type = "exec"
executable = "%(here)s/.venv/bin/ruff"
options = "format REVISION_SCRIPT_FILENAME"

[[tool.alembic.post_write_hooks]]
name = "Ruff Linter"
type = "exec"
executable = "%(here)s/.venv/bin/ruff"
options = "check --fix --quiet REVISION_SCRIPT_FILENAME"
